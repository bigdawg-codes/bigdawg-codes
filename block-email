#!/usr/bin/perl -w
#
# Block specified address(es) from wiki access

use strict;
use Getopt::Long;

my $base = "/srv/wiki.debian.org";
my $etc = "$base/etc/moin";
my $wsgi = "$base/bin/moin.wsgi";
my $deny_file = "$etc/spam_emails";
my $domains_deny_file = "$etc/spam_email_domains";
my $flattened_email_domains = "$etc/flattened_email_domains";
my $creation_check_log = "$base/var/log/account-creation-check";
my $block_ip = "$base/bin/block-ip";
my $reason = "";
my $quiet = 0;
my $help = '';
my $flat_email = "";
my %found;
my %flatten_domains;

sub should_flatten_email($) {
    my $email = shift;
    if ($email =~ m/\S+\@(\S+)/) {
	my $domain = $1;
	if ($flatten_domains{$domain}) {
	    return 1;
	}
    }
    return 0;
}

sub flatten_email($) {
    my $email = shift;
    my @email_parts = split /\@/,$email;
    $email_parts[0] =~ s/\.//g;
    $email = "$email_parts[0]\@$email_parts[1]";
    return $email;
}

sub read_flattened_domains() {
    open (FLAT, "< $flattened_email_domains") or die "Unable to open $flattened_email_domains for reading: $!\n";
    while (my $line = <FLAT>) {
	chomp $line;
	# Lowercase at this point
	$line = lc $line;
	$line =~ s/\s*#.*$//;
	if (length($line) > 2) {
	    $flatten_domains{$line}++;
	}
    }
    close FLAT;
}

sub get_time_short()
{
    my @tm;
    my $text;

    @tm = gmtime();
    $text = sprintf("%4d-%02d-%02d",
                    (1900 + $tm[5]),(1 + $tm[4]),$tm[3]);
    return $text;
}

sub valid_email($) {
    my $address = shift;

    if ($address =~ /\[/) {
	return 0;
    }

    # else
    return 1;
}

sub block_ips($) {
    my $domain = shift;
    my @ips_to_block;
    my $matched_domain = 0;

    print "  blocking all IPs linked to $domain...\n";
    open(CREATE, "< $creation_check_log") or die "Can't read $creation_check_log for reading: $!\n";
    while (my $line = <CREATE>) {
	chomp $line;
	if ($line =~ m/^\s+email:\s+\S+\@$domain/) {
	    $matched_domain = 1;
	}
	if ($matched_domain and ($line =~ m/^  host:\s+(\S+) /)) {
	    push(@ips_to_block, $1);
	    $matched_domain = 0;
	}
    }
    close CREATE;
    system($block_ip, @ips_to_block);
}

GetOptions('reason=s' => \$reason,
	   'quiet' => \$quiet,
           'help' => \$help);

if ($help) {
    print "block-email [--quiet] [--reason REASON] email [email email ...]\n";
    print "  Add an email address/domain to the block list, with a timestamp\n";
    print "  and a reason REASON. If no reason is supplied, \"manual\" will be used.\n";
    print "  If an argument does not contain \@, it is assumed to be a domain.\n";
    exit 0;
}

read_flattened_domains();

if ($reason eq "") {
    $reason = "manual";
}

if (scalar(@ARGV) == 0) {
    die "Need an email address to work with!\n";
}

foreach my $address (@ARGV) {
    # Lowercase at this point
    $address = lc $address;
    if (should_flatten_email($address)) {
	my $flat_address = flatten_email($address);
	if (!$quiet) {
	    print "Flattening address $address to $flat_address\n";
	}
	$address = $flat_address;
    }
    $found{$address} = 0;
}

foreach my $file ($deny_file, $domains_deny_file) {
    open (IN, "< $file") or print "Unable to open file $file: $!\n";
    while (my $line = <IN>) {
	chomp $line;
	# Lowercase at this point
	$line = lc $line;
	$line =~ s/\s*#.*$//;
	if (length($line) > 2) {
	    if ($file eq $domains_deny_file) {
		foreach my $address (keys %found) {
		    if ((length($line)) >= 2 && ($address =~ /\@\Q$line\E$/)) {
			if (!$quiet) {
			    print "address $address already found in $file (matches $line), removing from list\n";
			}
			delete $found{$address};
		    }
		}
	    } else {
		foreach my $address (keys %found) {
		    if ((length($line)) >= 2 && ($address =~ /^\Q$line\E$/)) {
			if (!$quiet) {
			    print "address $address already found in $file, removing from list\n";
			}
			delete $found{$address};
		    }
		}
	    }
	}
	if (scalar(keys %found) == 0) {
	    if (!$quiet) {
		print "all addresses already listed, exiting\n";
	    }
	    exit;
	}
    }
    close IN;
}

# If we're here, we haven't found the address in our existing list. We
# should add it!
my $timestamp = get_time_short();
open (OUT, ">> $deny_file") or die "Can't open file $deny_file for writing: $!\n";
open (OUT_DOM, ">> $domains_deny_file") or die "Can't open file $domains_deny_file for writing: $!\n";
foreach my $address (keys %found) {
    if (valid_email($address)) {
	if ($address =~ m/\@/) {
	    print OUT "$address # $timestamp($reason)\n";
	    if (!$quiet) {
		print "  blocked address $address\n";
	    }
	} else {
	    print OUT_DOM "$address # $timestamp($reason)\n";
	    if (!$quiet) {
		print "  blocked domain $address\n";
	    }
	    block_ips($address);
	}
    }
}
close OUT;
close OUT_DOM;

# And restart the wiki engine to pick up the change
utime(undef, undef, "$wsgi");

